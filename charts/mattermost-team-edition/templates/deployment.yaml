apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mattermost-team-edition.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "mattermost-team-edition.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "mattermost-team-edition.chart" . }}
spec:
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mattermost-team-edition.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret-config.yaml") . | sha256sum }}
        {{- if .Values.extraPodAnnotations }}
        {{- .Values.extraPodAnnotations | toYaml | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "mattermost-team-edition.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ include "mattermost-team-edition.chart" . }}
    spec:
      initContainers:
      {{- if not .Values.externalDB.enabled }}
      - name: "init-mysql"
        image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag }}"
        imagePullPolicy: {{ .Values.initContainerImage.imagePullPolicy }}
        command: ["sh", "-c", "until curl --max-time 5 http://{{ .Release.Name }}-mysql:3306; do echo waiting for {{ .Release.Name }}-mysql; sleep 5; done;"]
      {{- end }}
      {{- if .Values.extraInitContainers }}
      {{- .Values.extraInitContainers | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        env:
        - name: MM_CONFIG
{{- if .Values.global.features.database.useInternal }}
          value: "mysql://{{ .Values.mysqlha.mysqlha.mysqlUser }}:{{ .Values.mysqlha.mysqlha.mysqlPassword }}@tcp({{ .Release.Name }}-mysqlha-0.{{ .Release.Name }}-mysqlha:3306)/{{ .Values.mysqlha.mysqlha.mysqlDatabase }}?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s"
{{- else }}
          value: "{{ .Values.global.features.database.external.driver }}://{{ .Values.global.features.database.external.dataSource }}"
{{- end }}
        - name: MM_SERVICESETTINGS_SITEURL
          value: "{{ .Values.global.siteUrl }}"
        - name: MM_SERVICESETTINGS_LISTENADDRESS
          value: ":{{ .Values.mattermostApp.service.internalPort }}"
        - name: MM_SERVICESETTINGS_ENABLELINKPREVIEWS
          value: "{{ .Values.global.enableLinkPreviews }}"
        - name: MM_SERVICESETTINGS_ENABLECUSTOMEMOJI
          value: "{{ .Values.global.enableCustomEmoji }}"
{{- if .Values.global.features.elasticsearch.enabled }}
        - name: MM_ELASTICSEARCHSETTINGS_CONNECTIONURL
          value: "http://{{ .Release.Name }}-mattermost-elasticsearch:9200"
        - name: MM_ELASTICSEARCHSETTINGS_ENABLEINDEXING
          value: "true"
        - name: MM_ELASTICSEARCHSETTINGS_ENABLESEARCHING
          value: "true"
{{- end }}
{{- if .Values.minio.enabled }}
        - name: MM_FILESETTINGS_AMAZONS3ACCESSKEYID
          value: "{{ .Values.minio.accessKey }}"
        - name: MM_FILESETTINGS_AMAZONS3SECRETACCESSKEY
          value: "{{ .Values.minio.secretKey }}"
        - name: MM_FILESETTINGS_AMAZONS3BUCKET
          value: "{{ .Values.minio.defaultBucket.name }}"
        - name: MM_FILESETTINGS_AMAZONS3ENDPOINT
          value: "{{ .Release.Name }}-minio:9000"
{{- end }}
{{- if .Values.global.features.jobserver.enabled }}
        - name: MM_JOBSETTINGS_RUNJOBS
          value: "false"
        - name: MM_JOBSETTINGS_RUNSCHEDULER
          value: "false"
{{- end }}
{{- with .Values.mattermostApp.extraEnv }}
{{ toYaml . | indent 8 }}
{{- end }}


        {{- if .Values.extraEnvVars }}
          {{- .Values.extraEnvVars | toYaml | nindent 10 }}
        {{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.service.internalPort }}
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 90
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: http
        readinessProbe:
          initialDelaySeconds: 15
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: http
        volumeMounts:
        - mountPath: /mattermost/data
          name: mattermost-data
        resources:
          {{- .Values.resources | toYaml | nindent 12 }}
      volumes:
      - name: mattermost-config
        emptyDir: {}
      - name: mattermost-data
      {{ if .Values.persistence.data.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.data.existingClaim | default (include "mattermost-team-edition.fullname" .) }}
      {{ else }}
        emptyDir: {}
      {{ end }}
      - name: mattermost-plugins
      {{ if .Values.persistence.plugins.enabled }}
        persistentVolumeClaim:
          {{ if .Values.persistence.plugins.existingClaim }}
          claimName: {{.Values.persistence.data.existingClaim }}
          {{ else }}
          claimName: {{ default (include "mattermost-team-edition.fullname" .) }}-plugins
          {{ end }}
      {{ else }}
        emptyDir: {}
      {{ end }}
